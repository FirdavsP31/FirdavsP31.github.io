from flask import Flask, render_template, request, jsonify
import os
import requests
import asyncio
from markupsafe import escape
from models import Giveaway
from requests import get_giveaway_details, join_giveaway

app = Flask(__name__)
app.config['BOT_TOKEN'] = os.environ.get('BOT_TOKEN', '7908138757:AAEDdvrzpOLT-_BKgKT1wvLVxqoeaYiPSqM')

def run_async(coro):
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(coro)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ run_async: {e}")
        return None
    finally:
        loop.close()

@app.route('/')
def index():
    start_param = request.args.get('start_param', '')
    
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, —Å—Ä–∞–∑—É –æ—à–∏–±–∫–∞
    if not start_param or '_' not in start_param:
        return render_template('error.html', message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
    
    parts = start_param.split('_')
    giveaway_id = parts[1] if len(parts) > 1 and parts[1].isdigit() else ''
    
    if not giveaway_id:
        return render_template('error.html', message='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞')
    
    giveaway = run_async(get_giveaway_details(int(giveaway_id)))
    
    if not giveaway:
        return render_template('error.html', message='–†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    giveaway_data = {
        'id': giveaway.id,
        'name': escape(giveaway.name),
        'description': escape(giveaway.description),
        'participants': giveaway.participants,
        'max_participants': giveaway.max_participants,
        'is_active': giveaway.is_active,
        'channels': [{'title': escape(channel.title)} for channel in getattr(giveaway, 'channels', [])]
    }
    
    return render_template('index.html', giveaway=giveaway_data)

@app.route('/participate', methods=['POST'])
def handle_participation():
    data = request.json or {}
    user_id = data.get('user_id')
    giveaway_id = data.get('giveaway_id')

    if not user_id or not giveaway_id:
        return jsonify({'status': 'error', 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö'}), 400

    try:
        success = run_async(join_giveaway(giveaway_id, user_id))
        if not success:
            return jsonify({'status': 'error', 'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É'}), 400
    except Exception as e:
        return jsonify({'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'}), 500

    bot_token = app.config['BOT_TOKEN']
    if not bot_token:
        return jsonify({'status': 'error', 'message': '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞'}), 500

    message = f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!\nID —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {giveaway_id}"
    api_url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    try:
        response = requests.post(api_url, json={'chat_id': user_id, 'text': message})
        response.raise_for_status()
        return jsonify({'status': 'success'})
    except requests.RequestException as e:
        return jsonify({'status': 'error', 'message': f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}'}), 500

if __name__ == '__main__':
    app.run(debug=True)
